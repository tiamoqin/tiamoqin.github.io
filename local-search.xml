<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>人生第一篇博文-献给hexo</title>
    <link href="/2020/11/14/1st-hexo/"/>
    <url>/2020/11/14/1st-hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>​       选择基于github pages服务托管blog，利用hexo做blog框架，没有任何技术的原因，只因我的ex-boyfriend在一年前用它们搭建了他自己的技术blog，今年国庆长假后，他提前没有任何征兆提出的分手让我措手不及，多少次在睡梦中哭醒，想他，可我却狠心不联系他，微信、QQ和手机全部拉黑。但是我心痛，因此我想起做一个我自己的blog，换种方式在虚拟世界，与他隔空对话。只是他不知道我是谁。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote><ul><li><p>有一个Github账号</p></li><li><p>安装了node.js，npm</p></li><li><p>安装了git（windows客户端）</p></li></ul></blockquote><h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>​       Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/">hexo官网</a>进行详细查看。</p><p>​      本安装参考其他博主们安装教程，整理成三个部分：</p><ul><li>第一部分：Hexo的初级搭建，并部署到github page上，以及个人域名的绑定；</li><li>第二部分：Hexo的基本配置，更换主题；</li><li>第三部分：Hexo添加各种功能，包括搜索的SEO、阅读量统计、访问量统计和评论系统等。</li></ul><h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><p>​       Hexo的初级搭建，并部署到github page上，以及个人域名的绑定。（其实在认识我的ex-boyfriend之前，我是个程序小白，虽然知道一点数据结构，入门的C语言和python。但基本属于最多看懂代码的程度。认识他以后，我可以用C++改写代码跑模拟实验；会用Linux操作系统，简单地使用命令行在Linux上做一些基本操作；用LaTeX编辑论文；用Markdown做笔记；还有Mendeley收集整理论文、Dropbox云、Teamviewer远程……那个时候，我总像一个小迷妹一样，看着那个安静的他用手指敲击着键盘，然后变魔术一般的变出很多有意思的东西来）</p><p>​       不小心又开始回忆了，感慨一句一切已成空，希望几年以后我们还可以再续前缘。</p><h2 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h2><ol><li><p>安装Git</p></li><li><p>安装Node.js</p></li><li><p>安装Hexo</p></li><li><p>Github创建个人仓库（resposity）</p></li><li><p>生成SSH添加到Github</p></li><li><p>将Hexo部署到Github</p></li><li><p>设置个人域名</p></li><li><p>发布文章</p><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h3><p>​        Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的Hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git教程</a></p><ul><li><p>windows：到git官网上下载<a href="https://gitforwindows.org/">Download git</a>,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。双击下载好的exe文件，一路next就好。</p></li><li><p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p></li></ul><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install git</code></pre><p>安装好后，用<code>git --version</code> 来查看一下版本</p><h3 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2.安装Node.js"></a>2.安装Node.js</h3><p>​        Hexo是基于nodejs编写的，所以需要安装一下nodeJs和里面的包管理npm工具。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 Nodejs 使用了一个事件驱动、非阻塞式 I/O 的模型。</p><ul><li><p>windows：<a href="http://nodejs.cn/download/">nodejs</a>选择LTS版本就行了。</p><p><strong>安装步骤</strong>：下载后msi文件后，双击打开安装，一路next，在___Custom Setup___这一步记得选 <code>Add to PATH</code> ,这样就不用自己去配置电脑上环境变量了，装完后用Git Bash的命令行工具或按 <code>win + r</code> 快捷键调出运行，然后输入cmd确定，在cmd中输入path可以看到你的node是否配置在里面（环境变量）。</p><p><strong>查看版本</strong>：命令 <code>node -v</code></p></li><li><p>linux:</p><pre><code class="hljs routeros">1. sudo apt-<span class="hljs-builtin-name">get</span> install nodejs2. sudo apt-<span class="hljs-builtin-name">get</span> install npm</code></pre><p>安装完后，打开命令行</p><pre><code class="hljs crmsh"><span class="hljs-number">1</span>. <span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><span class="hljs-number">2</span>. npm -v</code></pre></li><li></li></ul></li></ol><h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h3><p>   前面git和nodejs安装好后，就可以安装Hexo了，你可以先创建一个文件夹blog，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p><p>   输入命令</p>   <pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span></code></pre><p>   依旧利用<code>hexo -v</code>查看一下版本</p><p>   接下来初始化一下hexo</p>   <pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> tjblog</code></pre><pre><code> 这个tjblog可以自己取什么名字都可以，然后</code></pre>   <pre><code class="hljs angelscript"><span class="hljs-number">1.</span> cd tjblog <span class="hljs-comment">//进入这个tjblog文件夹</span><span class="hljs-number">2.</span> npm install</code></pre><p>   新建完成后，指定文件夹目录下有：</p><ul><li><p>node_modules: 依赖包</p></li><li><p>public：存放生成的页面</p></li><li><p>scaffolds：生成文章的一些模板</p></li><li><p>source：用来存放你的文章</p></li><li><p>themes：主题</p></li><li><p>_config.yml: 博客的配置文件</p><pre><code class="hljs verilog"><span class="hljs-number">1</span>. hexo <span class="hljs-keyword">generate</span> <span class="hljs-comment">// 或用缩写g</span><span class="hljs-number">2</span>. hexo server</code></pre><p>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p><p>大概长这样：<br><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksvj6e0j211c0f2n60.jpg" alt="img"><br>使用ctrl+c可以把服务关掉。</p></li></ul><h3 id="4-Github创建个人仓库"><a href="#4-Github创建个人仓库" class="headerlink" title="4. Github创建个人仓库"></a>4. Github创建个人仓库</h3><p>首先，你先要有一个GitHub账户，去注册一个吧。</p><p>注册完登录后，在GitHub.com中看到一个New repository，新建仓库</p><p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。（此处引用别人的图，我偷个懒）</p><p><img src="https://i.loli.net/2020/11/14/stg6iZuDJ4OrWBY.jpg" alt="d40b6c29gy1fvrkstusrdj20iw0o4myp.jpg"></p><p>点击__create repository__。</p><h3 id="5-生成SSH添加到GitHub"><a href="#5-生成SSH添加到GitHub" class="headerlink" title="5.生成SSH添加到GitHub"></a>5.生成SSH添加到GitHub</h3><p>回到你的git bash中，</p><pre><code class="hljs routeros">1. git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">&quot;yourname&quot;</span>2. git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">&quot;youremail&quot;</span></code></pre><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><pre><code class="hljs routeros">1. git<span class="hljs-built_in"> config </span>user.name2. git<span class="hljs-built_in"> config </span>user.email</code></pre><p>然后创建SSH,一路回车</p><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;youremail&quot;</span></code></pre><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。（继续借用别人的图）</p><p>!<img src="https://i.loli.net/2020/11/14/JbjR6iD4dFAlgS5.jpg" alt="d40b6c29gy1fvrkstd106j20kb073gll.jpg"></p><p>​       ssh，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>​        而后在GitHub的setting中，找到SSH keys的设置选项，点击<code>New SSH key</code><br>把你的<code>id_rsa.pub</code>里面的信息复制进去。</p><p>​        在git bash中，查看是否成功</p><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com</code></pre><h3 id="6-将Hexo部署到GitHub"><a href="#6-将Hexo部署到GitHub" class="headerlink" title="6.将Hexo部署到GitHub"></a>6.将Hexo部署到GitHub</h3><p>​        这一步，我们就可以将Hexo和GitHub关联起来，也就是将Hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><pre><code class="hljs less"><span class="hljs-attribute">deploy</span>:  <span class="hljs-attribute">type</span>: git  <span class="hljs-attribute">repo</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//github.com/YourgithubName/YourgithubName.github.io.git</span>  <span class="hljs-attribute">branch</span>: master</code></pre><p>​       这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-deployer-git <span class="hljs-comment">--save</span></code></pre><p>​       然后</p><pre><code class="hljs verilog">hexo cleanhexo <span class="hljs-keyword">generate</span>hexo deploy<span class="hljs-number">123</span></code></pre><p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写<br><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p><p>注意deploy时可能要你输入username和password。</p><p>得到下图就说明部署成功了，过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了！！</p><h3 id="7-设置个人域名"><a href="#7-设置个人域名" class="headerlink" title="7. 设置个人域名"></a>7. 设置个人域名</h3><p>​       现在你的个人网站的地址是 <code>yourname.github.io</code>，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。在<a href="https://sg.godaddy.com/">godaddy</a>和<a href="https://wanwang.aliyun.com/?spm=5176.8142029.digitalization.2.e9396d3e46JCc5">阿里云</a>上买一个域名，我买的是 <code>tiamoqin.me</code>，各个后缀的价格不太一样。</p><p>​       以下示范，是阿里云域名网站。点<strong>解析</strong>进去，添加解析。godaddy请参考[<a href="https://www.cnblogs.com/openxxs/p/5950598.html">通过GitHub和GoDaddy搭建静态个人博客</a>]，godaddy的交互很坑人，我找了半天的 __Domains manage__。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstcu8xj20d607wdfw.jpg" alt="img"></p><p>其中，192.30.252.153 和 192.30.252.154 是GitHub的服务器地址，或从这里<a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site">获取服务器地址</a><br><strong>注意，解析线路选择默认</strong>。这个境外是后面来做国内外分流用的,在后面的博客中会讲到。记得现在选择<strong>默认</strong>！！</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstf8unj20ob05b0sq.jpg" alt="img"></p><p>登录GitHub，进入之前创建的仓库，点击settings，设置__Custom domain__，输入你的域名<code>tiamoqin.me</code></p><p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p><p><img src="https://i.loli.net/2020/11/14/REtsF6WG3vknq8X.png" alt="微信图片_20201114115503.png"></p><p>最后，在gitbash中，输入</p><pre><code class="hljs angelscript"><span class="hljs-number">1.</span> hexo clean<span class="hljs-number">2.</span> hexo g<span class="hljs-number">3.</span> hexo d</code></pre><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><p>接下来你就可以正式开始写文章了。</p><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> newpapername</code></pre><p>然后在source/_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再</p><pre><code class="hljs angelscript"><span class="hljs-number">1.</span> hexo clean<span class="hljs-number">2.</span> hexo g<span class="hljs-number">3.</span> hexo d</code></pre><p>就可以看到更新了。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2020/11/13/hexo/"/>
    <url>/2020/11/13/hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>​       选择基于github pages服务托管blog，利用hexo做blog框架，没有任何技术的原因，只因我的ex-boyfriend在一年前用它们搭建了他自己的技术blog，今年国庆长假后，他提前没有任何征兆提出的分手让我措手不及，多少次在睡梦中哭醒，想他，可我却狠心不联系他，微信、QQ和手机全部拉黑。但是我心痛，因此我想起做一个我自己的blog，换种方式在虚拟世界，与他隔空对话。只是他不知道我是谁。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote><ul><li><p>有一个Github账号</p></li><li><p>安装了node.js，npm</p></li><li><p>安装了git（windows客户端）</p></li></ul></blockquote><h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>​       Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/">hexo官网</a>进行详细查看。</p><p>​      本安装参考其他博主们安装教程，整理成三个部分：</p><ul><li>第一部分：Hexo的初级搭建，并部署到github page上，以及个人域名的绑定；</li><li>第二部分：Hexo的基本配置，更换主题；</li><li>第三部分：Hexo添加各种功能，包括搜索的SEO、阅读量统计、访问量统计和评论系统等。</li></ul><h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><p>​       Hexo的初级搭建，并部署到github page上，以及个人域名的绑定。（其实在认识我的ex-boyfriend之前，我是个程序小白，虽然知道一点数据结构，入门的C语言和python。但基本属于最多看懂代码的程度。认识他以后，我可以用C++改写代码跑模拟实验；会用Linux操作系统，简单地使用命令行在Linux上做一些基本操作；用LaTeX编辑论文；用Markdown做笔记；还有Mendeley收集整理论文、Dropbox云、Teamviewer远程……那个时候，我总像一个小迷妹一样，看着那个安静的他用手指敲击着键盘，然后变魔术一般的变出很多有意思的东西来）</p><p>​       不小心又开始回忆了，感慨一句一切已成空，希望几年以后我们还可以再续前缘。</p><h2 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h2><ol><li><p>安装Git</p></li><li><p>安装Node.js</p></li><li><p>安装Hexo</p></li><li><p>Github创建个人仓库（resposity）</p></li><li><p>生成SSH添加到Github</p></li><li><p>将Hexo部署到Github</p></li><li><p>设置个人域名</p></li><li><p>发布文章</p><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h3><p>​        Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的Hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git教程</a></p><ul><li><p>windows：到git官网上下载<a href="https://gitforwindows.org/">Download git</a>,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。双击下载好的exe文件，一路next就好。</p></li><li><p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p></li></ul><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install git</code></pre><p>安装好后，用<code>git --version</code> 来查看一下版本</p><h3 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2.安装Node.js"></a>2.安装Node.js</h3><p>​        Hexo是基于nodejs编写的，所以需要安装一下nodeJs和里面的包管理npm工具。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 Nodejs 使用了一个事件驱动、非阻塞式 I/O 的模型。</p><ul><li><p>windows：<a href="http://nodejs.cn/download/">nodejs</a>选择LTS版本就行了。</p><p><strong>安装步骤</strong>：下载后msi文件后，双击打开安装，一路next，在___Custom Setup___这一步记得选 <code>Add to PATH</code> ,这样就不用自己去配置电脑上环境变量了，装完后用Git Bash的命令行工具或按 <code>win + r</code> 快捷键调出运行，然后输入cmd确定，在cmd中输入path可以看到你的node是否配置在里面（环境变量）。</p><p><strong>查看版本</strong>：命令 <code>node -v</code></p></li><li><p>linux:</p><pre><code class="hljs routeros">1. sudo apt-<span class="hljs-builtin-name">get</span> install nodejs2. sudo apt-<span class="hljs-builtin-name">get</span> install npm</code></pre><p>安装完后，打开命令行</p><pre><code class="hljs crmsh"><span class="hljs-number">1</span>. <span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><span class="hljs-number">2</span>. npm -v</code></pre></li><li></li></ul></li></ol><h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h3><p>   前面git和nodejs安装好后，就可以安装Hexo了，你可以先创建一个文件夹blog，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p><p>   输入命令</p>   <pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span></code></pre><p>   依旧利用<code>hexo -v</code>查看一下版本</p><p>   接下来初始化一下hexo</p>   <pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> tjblog</code></pre><pre><code> 这个tjblog可以自己取什么名字都可以，然后</code></pre>   <pre><code class="hljs angelscript"><span class="hljs-number">1.</span> cd tjblog <span class="hljs-comment">//进入这个tjblog文件夹</span><span class="hljs-number">2.</span> npm install</code></pre><p>   新建完成后，指定文件夹目录下有：</p><ul><li><p>node_modules: 依赖包</p></li><li><p>public：存放生成的页面</p></li><li><p>scaffolds：生成文章的一些模板</p></li><li><p>source：用来存放你的文章</p></li><li><p>themes：主题</p></li><li><p>_config.yml: 博客的配置文件</p><pre><code class="hljs verilog"><span class="hljs-number">1</span>. hexo <span class="hljs-keyword">generate</span> <span class="hljs-comment">// 或用缩写g</span><span class="hljs-number">2</span>. hexo server</code></pre><p>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p><p>大概长这样：<br><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksvj6e0j211c0f2n60.jpg" alt="img"><br>使用ctrl+c可以把服务关掉。</p></li></ul><h3 id="4-Github创建个人仓库"><a href="#4-Github创建个人仓库" class="headerlink" title="4. Github创建个人仓库"></a>4. Github创建个人仓库</h3><p>首先，你先要有一个GitHub账户，去注册一个吧。</p><p>注册完登录后，在GitHub.com中看到一个New repository，新建仓库</p><p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。（此处引用别人的图，我偷个懒）</p><p><img src="https://i.loli.net/2020/11/14/stg6iZuDJ4OrWBY.jpg" alt="d40b6c29gy1fvrkstusrdj20iw0o4myp.jpg"></p><p>点击__create repository__。</p><h3 id="5-生成SSH添加到GitHub"><a href="#5-生成SSH添加到GitHub" class="headerlink" title="5.生成SSH添加到GitHub"></a>5.生成SSH添加到GitHub</h3><p>回到你的git bash中，</p><pre><code class="hljs routeros">1. git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">&quot;yourname&quot;</span>2. git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">&quot;youremail&quot;</span></code></pre><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><pre><code class="hljs routeros">1. git<span class="hljs-built_in"> config </span>user.name2. git<span class="hljs-built_in"> config </span>user.email</code></pre><p>然后创建SSH,一路回车</p><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;youremail&quot;</span></code></pre><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。（继续借用别人的图）</p><p>!<img src="https://i.loli.net/2020/11/14/JbjR6iD4dFAlgS5.jpg" alt="d40b6c29gy1fvrkstd106j20kb073gll.jpg"></p><p>​       ssh，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>​        而后在GitHub的setting中，找到SSH keys的设置选项，点击<code>New SSH key</code><br>把你的<code>id_rsa.pub</code>里面的信息复制进去。</p><p>​        在git bash中，查看是否成功</p><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com</code></pre><h3 id="6-将Hexo部署到GitHub"><a href="#6-将Hexo部署到GitHub" class="headerlink" title="6.将Hexo部署到GitHub"></a>6.将Hexo部署到GitHub</h3><p>​        这一步，我们就可以将Hexo和GitHub关联起来，也就是将Hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><pre><code class="hljs less"><span class="hljs-attribute">deploy</span>:  <span class="hljs-attribute">type</span>: git  <span class="hljs-attribute">repo</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//github.com/YourgithubName/YourgithubName.github.io.git</span>  <span class="hljs-attribute">branch</span>: master</code></pre><p>​       这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-deployer-git <span class="hljs-comment">--save</span></code></pre><p>​       然后</p><pre><code class="hljs verilog">hexo cleanhexo <span class="hljs-keyword">generate</span>hexo deploy<span class="hljs-number">123</span></code></pre><p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写<br><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p><p>注意deploy时可能要你输入username和password。</p><p>得到下图就说明部署成功了，过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了！！</p><h3 id="7-设置个人域名"><a href="#7-设置个人域名" class="headerlink" title="7. 设置个人域名"></a>7. 设置个人域名</h3><p>​       现在你的个人网站的地址是 <code>yourname.github.io</code>，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。在<a href="https://sg.godaddy.com/">godaddy</a>和<a href="https://wanwang.aliyun.com/?spm=5176.8142029.digitalization.2.e9396d3e46JCc5">阿里云</a>上买一个域名，我买的是 <code>tiamoqin.me</code>，各个后缀的价格不太一样。</p><p>​       以下示范，是阿里云域名网站。点<strong>解析</strong>进去，添加解析。godaddy请参考[<a href="https://www.cnblogs.com/openxxs/p/5950598.html">通过GitHub和GoDaddy搭建静态个人博客</a>]，godaddy的交互很坑人，我找了半天的 __Domains manage__。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstcu8xj20d607wdfw.jpg" alt="img"></p><p>其中，192.30.252.153 和 192.30.252.154 是GitHub的服务器地址，或从这里<a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site">获取服务器地址</a><br><strong>注意，解析线路选择默认</strong>。这个境外是后面来做国内外分流用的,在后面的博客中会讲到。记得现在选择<strong>默认</strong>！！</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstf8unj20ob05b0sq.jpg" alt="img"></p><p>登录GitHub，进入之前创建的仓库，点击settings，设置__Custom domain__，输入你的域名<code>tiamoqin.me</code></p><p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p><p><img src="https://i.loli.net/2020/11/14/REtsF6WG3vknq8X.png" alt="微信图片_20201114115503.png"></p><p>最后，在gitbash中，输入</p><pre><code class="hljs angelscript"><span class="hljs-number">1.</span> hexo clean<span class="hljs-number">2.</span> hexo g<span class="hljs-number">3.</span> hexo d</code></pre><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><p>接下来你就可以正式开始写文章了。</p><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> newpapername</code></pre><p>然后在source/_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再</p><pre><code class="hljs angelscript"><span class="hljs-number">1.</span> hexo clean<span class="hljs-number">2.</span> hexo g<span class="hljs-number">3.</span> hexo d</code></pre><p>就可以看到更新了。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/11/10/hello-world/"/>
    <url>/2020/11/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
